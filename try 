//     //  "build": "npx tsc",
//     //  "test": "npm run build && npm run jasmine",
//     //  "start": "nodemon src/index.ts"

//     // ---
//       // "scripts": {
//   //   "watch": "tsc-watch --esModuleInterop src/index.ts --outDir ./dist --onSuccess \"node ./dist/index.js\"",
//   //   "build": "tsc --esModuleInterop src/index.ts --outDir ./dist",
//   //   "db-up": "db-migrate up",
//   //   "db-down": "db-migrate down",
//   //   "jasmine": "jasmine",
//   //   "prettier": "prettier --config .prettierrc src/**/*.ts --write",
//   //   "lint": "eslint src/**/*.ts ",
//   //   "create":"db-migrate --config database.json db:create storefront_backend",
//   //   "drop":"db-migrate --config database.json db:drop storefront_backend",


    


//   // },

//   ----------


//   import { Request, Response } from 'express';
// import { userAuthenToken} from '../utils/auth';
// import { User, UserMapping } from '../models/user';
// import jwt from 'jsonwebtoken'

// const userMapping = new UserMapping();
// const {
//   TOKEN_SECRET,
// } = process.env


// export const getAllUser = async (_req: Request, res: Response) => {
//   try {
//     const users: User[] = await userMapping.index();
//     res.json(users);
//   } catch (err) {
//     res.status(400);
//     res.json(err);
//     // res.status(400).json(err);
//   }
// };

// export const createUser = async (req: Request, res: Response) => {
//   try {
//     const newUser = {
//       username: req.body.username as unknown as string,
//       password: req.body.password as unknown as string,
//       firstname: req.body.firstname as unknown as string,
//       lastname: req.body.lastname as unknown as string,
//     };

//     if (
//       !newUser.username ||
//       !newUser.password ||
//       !newUser.firstname ||
//       !newUser.lastname
//     ) {
//       res.status(400);
//       res.send('Missing param username or password or firstname or lastname');
//       return false;
//     }
//     const user = await userMapping.create(newUser);
//     const token = jwt.sign({ newUser: user }, TOKEN_SECRET as string)

//     res.json(token);
//   } catch (err) {
//     res.status(400);
//     res.json(err);
//   }
// };



// export const authenticate = async (req: Request, res: Response) => {
//   try {
    
//       const authUser = await userMapping.authenticate(req.body.username, req.body.password);
//       res.json(authUser);
//     // const username = req.body.username as unknown as string;
//     // const password = req.body.password as unknown as string;
//     // if (!username || !password) {
//     //   res.status(400);
//     //   res.send('Missing param username or password');
//     //   return false;
//     // }
//     // const user: User | null = await userMapping.authenticate(
//     //   username,
//     //   password,
//     // );
//     // if (!user) {
//     //   return res.status(401).send(`Wrong password!`);
//     // }
//     // res.json(createUserAuthenToken(user));
//   } catch (err) {
//     res.status(400).json(err);
//   }
// };
